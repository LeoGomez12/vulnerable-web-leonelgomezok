name: Deploy Vulnerable Application

on:
  push:
    branches:
      - master

#Permisos 
permissions:
  contents: read
  checks: write

jobs:
  deploy-heroku:
    name: Deploy Heroku + SAST + DAST
    runs-on: ubuntu-latest

    env:
      HEROKU_APP_NAME: vulnerable-web-leonelgomezok
      TARGET_URL: ${{ secrets.APP_URL || 'https://vulnerable-web-leonelgomezok.herokuapp.com' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      #SAST
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      #Deploy
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Container login/push/release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku auth:token >/dev/null 2>&1 || true
          heroku container:login
          heroku container:push web -a $HEROKU_APP_NAME
          heroku container:release web -a $HEROKU_APP_NAME

      #Espera de la APP
      - name: Wait for app to be ready
        run: |
          echo "Waiting for $TARGET_URL ..."
          for i in {1..30}; do
            if curl -sSf -o /dev/null "$TARGET_URL"; then
              echo "App is up!"
              exit 0
            fi
            sleep 5
          done
          echo "App did not become ready in time"
          exit 1

      #DAST
      - name: Run OWASP ZAP Baseline via Docker
        run: |
          # Carpeta local para el reporte
          mkdir -p zap-output
          # Dar permisos para que el usuario 'zap' dentro del contenedor pueda escribir
          chmod 777 zap-output
          # Ejecutar ZAP con el working dir correcto
          docker run --rm -t \
            -v "$PWD/zap-output:/zap/wrk" \
            -w /zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "$TARGET_URL" -a -r zap-report.html
          # Mostrar el resultado
          ls -l zap-output    

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html
          retention-days: 14